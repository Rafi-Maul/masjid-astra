<?php	if (!defined('BASEPATH')) exit('No direct script access allowed');   class Number2Text {        		private $puluh         = "PULUH ";		private $ratus         = "RATUS ";	   		private $ribu          = "RIBU ";		private $juta          = "JUTA ";   		private $milyar        = "MILYAR ";		private $triliun       = "TRILIUN ";	   		private $satu_a        = " SE";		private $satu          = " SATU ";		private $dua           = " DUA ";		private $tiga          = " TIGA ";		private $empat         = " EMPAT ";		private $lima          = " LIMA ";		private $enam          = " ENAM ";		private $tujuh         = " TUJUH ";		private $delapan	   = " DELAPAN ";		private $sembilan      = " SEMBILAN ";	   		private $sepuluh       = " SEPULUH ";		private $sebelas       = " SEBELAS ";		private $duabelas      = " DUA BELAS ";		private $tigabelas     = " TIGA BELAS ";		private $empatbelas    = " EMPAT BELAS ";		private $limabelas     = " LIMA BELAS ";		private $enambelas     = " ENAM BELAS ";		private $tujuhbelas    = " TUJUH BELAS ";		private $delapanbelas  = " DELAPAN BELAS ";		private $sembilanbelas = " SEMBILAN BELAS ";	   		private $value;		private $dec_part;		private $total_part;		private $length;	   		public function __construct($params) {			$value 			  = trim($params['value']);			$arr_value 		  = explode('.', $value);			if (count($arr_value) == 2) {				list($value, $dec_part) = $arr_value;			} else {				$value 	  = $arr_value[0];				$dec_part = '';			}			$this->value	  = $value;			$this->dec_part	  = $dec_part;		    $this->length     = strlen($value);		    $this->total_part = ceil ($this->length/3);		}	   		public function getText() {			$result = '';						$value = $this->value;		    			if ($this->length <= 15) { 								if (@preg_match("/[0-9]{" . $this->length . "}/", $value)) { 										if ($this->total_part == 1) { 						$sisa_part = $this->length; 					} else { 						$sisa_part = $this->length % 3; 					}	       					for ($a = $this->total_part; $a >= 1; $a--) { 						$part_value = $this->split_part($a, $sisa_part); 					    						if ($part_value>0) { 														$result .= $this->convert($part_value, $a);		               		                    switch ($a) { 								case 0 : 									break;								case 1 : 									break;					            case 2 : 									$result .= $this->ribu;									break;								case 3 : 									$result .= $this->juta;						            break;								case 4 : 									$result .= $this->milyar;						           	break;					            case 5 : 									$result .= $this->triliun;							        break;			                }						}   		            }	            } else { 					$result = 'Bugs !!!'; 				}								if (!empty($this->dec_part)) {					$dec_str = '';					$arr_dec = str_split($this->dec_part);					foreach ($arr_dec as $char) {						switch (intval($char)) {							case 1 :								$dec_str .= $this->satu;								break;							case 2 :								$dec_str .= $this->dua;								break;							case 3 :								$dec_str .= $this->tiga;								break;							case 4 :								$dec_str .= $this->empat;								break;							case 5 :								$dec_str .= $this->lima;								break;							case 6 :								$dec_str .= $this->enam;								break;							case 7 :								$dec_str .= $this->tujuh;								break;							case 8 :								$dec_str .= $this->delapan;								break;							case 9 :								$dec_str .= $this->sembilan;								break;							default :								$dec_str .= ' NOL ';						}					}										$result .= 'KOMA' . $dec_str;				}	         			    return $result;			} else { 				return 'Nilai lebih besar daripada Trilyun'; 			}	     		}       		private function convert($part_value, $part) {					$tmp_return = '';						$part_length = strlen($part_value);	    			for ($b = 0; $b <= $part_length - 1; $b++) { 							$part_detail = substr($part_value, $b, 1);		          				if ($part_detail == 0) { 					/*  do nothing  */ 				} else if ($b == $part_length - 2 && substr($part_value, $part_length - 2, 1) ==1) { 										switch (substr($part_value, $part_length - 1, 1)) { 						case 0 : 							$tmp_return .= $this->sepuluh; 							break;    			            case 1 : 							$tmp_return .= $this->sebelas; 							break;			            case 2 : 							$tmp_return.= $this->duabelas; 							break;						case 3 : 							$tmp_return .= $this->tigabelas; 							break;						case 4 : 							$tmp_return .= $this->empatbelas; 							break;						case 5 : 							$tmp_return .= $this->limabelas; 							break;						case 6 : 							$tmp_return .= $this->enambelas; 							break;						case 7 : 							$tmp_return .= $this->tujuhbelas; 							break;						case 8 : 							$tmp_return .= $this->delapanbelas; 							break;						case 9 : 							$tmp_return .= $this->sembilanbelas; 							break;			        }		        } else { 					if (($part_length <> 1) && ($b == ($part_length - 1)) && (substr($part_value, $part_length - 2, 1) == 1)) { 						/*  do nothing  */ 					} else { 												switch ($part_detail) { 							case 0 : 								/*  do nothing  */ 								break;		                    case 1 : 								if ($part_length == 1) { 									if ($part == 2) {										$tmp_return .= $this->satu_a; 									} else { 										$tmp_return .= $this->satu; 									}								} else { 									if ($b == ($part_length - 1)) { 										$tmp_return .= $this->satu; 									} else { 										$tmp_return .= $this->satu_a; 									}								}								break;  							case 2 : 								$tmp_return .= $this->dua;								break;			   				case 3 : 								$tmp_return .= $this->tiga;								break;							case 4 : 								$tmp_return .= $this->empat;								break;							case 5 : 								$tmp_return .= $this->lima;								break;							case 6 : 								$tmp_return .= $this->enam;								break;							case 7 : 								$tmp_return .= $this->tujuh;								break;							case 8 : 								$tmp_return .= $this->delapan;								break;							case 9 : 								$tmp_return .= $this->sembilan;								break;						}												switch ($b) { 							case $part_length - 1 : 								break;							case $part_length - 2 : 								$tmp_return .= $this->puluh; 								break;			   				case $part_length - 3 : 								$tmp_return .= $this->ratus; 								break;						}					}						 		        }		   			}		 			return $tmp_return;		}	  		private function split_part($part, $sisa_part) { 						$value = $this->value;		    if ($sisa_part < 1) { 				$sisa_part = 3; 			}	 			if ($part == $this->total_part) { 				$tmp_return = substr($value, 0, $sisa_part); 			} else { 				$tmp_return = substr($value, ($this->total_part - ($part + 1)) * 3 + $sisa_part, 3); 			}	    			return $tmp_return;	    }       	}/* End of file Number2Text.php *//* Location: ./system/application/libraries/Number2Text.php */	